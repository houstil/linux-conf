# -*- mode: Shell-script -*-

#sagem specific bourn-shell compatible shell configuration

# set PATH so it includes user's private lotus directory if it exists
if [ -d "$HOME/lotus/notes/data" ] ; then
    PATH="$HOME/lotus/notes/data:$PATH"
fi

# Add candidates to the cd command
# CDPATH=.:~:..:~/hal2/
CDPATH=.

#################################
# SHELL DEPENDANT CONFIGURATION #
#################################

# LOAD SAGEM TOOLS

# udpate ~/.tools-modrivers.env if older than one day
# unfortunatly the this script is not zshell compatible
test=$(ps -p $$ |grep bash)
if [ ! -z "$test" ]
then
        if [ -e ~/.tools-modrivers.env ]
        then
                touch -d '-1 day' /tmp/limit
                if [ /tmp/limit -nt ~/.tools-modrivers.env ]
                then
                        source ~/sagem-tools-modrivers/set-tools-modrivers.sh
                fi
        else
                source ~/sagem-tools-modrivers/set-tools-modrivers.sh
        fi      
fi
unset test   
source ~/.tools-modrivers.env

# SAGEM UTILITY FUNCTIONS

test=$(ps -p $$ |grep zsh)
if [ ! -z "$test" ]
then
# a wrapper for makecpenv.sh in hal2 env with a nice completion
    cpenv () {
	if [ -d "_ref/config" ]; then
	    makecpenv.sh _ref $1
	else
	    echo " Error : _ref/config not found"
	fi
    }

# the completion function for the above utility
    _cpenv () {
	local -a _config
	_config=( `ls _ref/config|sed 's/.config//g'` )
	_values 'config' \
	    $_config
    }
    compdef _cpenv cpenv

# a function to checkout an hal2 baseline, with its completion
    cohal2 ()
    {
	if [[ -z $1 ]] || [[ -z $2 ]]
	    then
	    echo " Error : bad argument\n" "  cohal2 <revision> <project>"
	    return
	fi
	tag=`echo $1 |sed 's/RO_hal2-baseline\.st-rev1_//g'|tr -d '/'`
	svn co http://forge-urd44.osn.sagem/svn/hal2-baseline.st-rev1/BO/tags/$1 $tag-$2/_ref
    }

    _cohal2 ()
    {
	local -a _versions
	_versions=( `svn ls http://forge-urd44.osn.sagem/svn/hal2-baseline.st-rev1/BO/tags/|grep RO` )
	_values 'versions' \
	    $_versions
    }
    compdef _cohal2 cohal2
    
fi

#####################################
# CLEAN UP AFTER SAGEM TOOLS SCRIPT #
#####################################

for a in "vi" "rcc" "rctc" "rcb" "rcz" "cpf" "rmf" "ka" "kg"
do
    test=$(alias | grep  $a=)
    if [ ! -z "$test" ]
       then
       unalias $a
    fi
    unset test
done

################
# LAFORGE URLs #
################

export lfu="http://forge-urd44.osn.sagem/svn"

###############################
# SAGEM WORK SPECIFIC ALIASES #
###############################

#compilation
alias sd='source ~/bin/sDebug.sh'
alias soe='source ~/.tools-modrivers.env'
alias mker='make ARCH=sh CROSS_COMPILE=sh4-linux- O=$KERNEL_BLD_PATH'
alias mcker='make ARCH=sh CROSS_COMPILE=sh4-linux- O=$KERNEL_BLD_PATH menuconfig'
alias swprb='cmp -s ~/stprobe.env ~/stprobe.env.uc2 && cp -v ~/stprobe.env.uc1 ~/stprobe.env || cp -v ~/stprobe.env.uc2 ~/stprobe.env'

#network
alias sshmib='ssh admin@190.99.0.141'
alias sshs='ssh root@$(stbip)'
alias sshrs='ssh-keygen -R $(stbip);ssh root@$(stbip)'
alias exchange='nautilus smb://osn02001.osn.sagem/echanges/'

#process management
alias kg='pidof sh4gdb | xargs kill -9'
alias kl='pidof sh4-linux-gdb | xargs kill -9'
alias crun='/opt/STM/STLinux-2.3/devkit/sh4/bin/sh4-linux-gdb  \
            --directory=/opt/STM/STLinux-2.3/devkit/sh4/bin//.././stdcmd \
            --command=/home/g178452/2hal-svn/mdoc/BO_nc-eci93-hd_rev1-cab-ip/custom.cmd \
            -nx -q -n'
alias kn='ps aux | grep notes | grep -v grep | awk "{print \$2}" | sort -nr | xargs kill -9'

#bugzilla
alias bu='bugz'
alias bumb='bugz search -H g178452 -a jean-louis.arnault@sagemcom.com'
alias bum='bugz modify -H g178452 -a jean-louis.arnault@sagemcom.com'
alias but='bugz get'

#fsvn aliases
alias roo='fsvn-make-ro.sh'
alias ckp='fsvn-check-product.sh'
alias com='fsvn-commit.sh'

#environement
alias sp='source ~/bin/setProxy.sh'

#tools
alias 141=notify141.sh

# get mail
alias upmail='cat ~/.offlineimap/pid | xargs kill -s USR1 && ~/bin/notmuch_rt.sh > /dev/null'

#############
# FUNCTIONS #
#############

function sshr {ssh root@$1}

#stb
function stbip
{
 echo `cat ~/stprobe.env|grep TARGET=|grep -o "[0-9]\{0,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}"`
}

#laforge
function getSTAPIDoc {
    svn export http://forge-urd44.osn.sagem/svn/st-lib-api.dvd$1
}

#proxy
function wps {
    export http_proxy="http://10.66.243.130:8080"
    eval $@
    export http_proxy=""
}

function wpp {
    export http_proxy="http://190.99.2.254:41209"
    eval $@
    export http_proxy=""
}


# launch the env profiler
# profiler="$HOME/.env-profiler/profiler.sh"
# [[ -f "$profiler" ]] && source "$profiler"

# to set up an environnement :
# an array of function to guess the project
projects=(\
        diag_mdoc set_mdoc PROJECT_MDOC\
        diag_hal2 set_hal2 PROJECT_HAL2\
        diag_ptlux set_ptlux PROJECT_PTLUX\
        diag_hal3 set_hal3 PROJECT_HAL3 )
# this function only use the pwd to guess the project
function ses
{
        for ((p=1; p<${#projects[@]};p=p+3))
        do
                if [[ `${projects[$p]}` -eq 1 ]]; then
                        export PROJECT_ID=${projects[(($p+2))]}
                        ${projects[(($p+1))]}
			break
                fi
        done
}

# those functions look for their project characteristic
function diag_mdoc {
        ([[ -n "`pwd | xargs svn info 2>&1 | grep nc-eci93-hd`" ]] && echo 1) || echo 0
}
function diag_hal2 {
        ([[ -n "`svn info $(pwd)/../_ref 2>&1 | grep hal2-baseline.st-rev1`"  ]] && echo 1) || echo 0
}
function diag_hal3 {
        echo 0
}
function diag_ptlux {
    ([[ -n "`svn info ..` 2>&1 | grep ptlux-hd-v1" ]] && echo 1) || echo 0
}
# those functions set the environnement
function set_mdoc {
        source config.sh
}
function set_hal2 {
        7env
}
function set_ptlux {
    source set-env 2.2
    cd sagem_app/PTLUX.PVRHD
}
function set_hal3 {
        echo "Error : not implemented yet !"
}

function mek {
	case $PROJECT_ID in
		"PROJECT_HAL2")
			mk $*
			;;
		"PROJECT_MDOC")
			make $*
			return $?
			;;
		"")
			echo " Error : PROJECT_ID undefined"
	esac
}

function run {
	case $PROJECT_ID in
		"PROJECT_HAL2")
			mk run
			;;
		"PROJECT_MDOC")
			make nfs-run
			return $?
			;;
		?)
			echo " Error : PROJECT_ID undefined"
	esac
}


# a little function to branch following Laforge syntaxe
function bco {
    if [ -z `echo $2 |grep -e "^[0-9]*$"` ];then
	echo " error : param 2 must be a bug number"
    fi
    if [ -n "$3" ];then
	local modbranch="_$3"
    fi
    local rooturl=`echo $1 |grep -o "^.*/BO/\(branches\|tags\)"|sed 's/\/\(branches\|tags\)$//g'`
    local module=`echo $1| sed 's/^.*svn\/\(.*\)\/BO\/.*$/\1/g'`
    local user=`whoami`
    local timestamp=`date +%y%m%d-%k%M%S|tr ' ' '0'`

    local branch=BCO_$module""$modbranch""_$2_$user""_$timestamp
    local branchurl=$rooturl/branches/$branch

    echo " copying $1"
    echo " to      $branchurl"
    
    confirm "Create branch $branch ? [y/N]"
    if [ $? -eq 0 ] ;then
	svn copy $1 $branchurl -m "bug $2 : [BRANCH] from $1"

        if [ $? -eq 0 ] ;then
	    svn sw $branchurl
        fi
    fi
}

# a little function to make a RCO following sagem syntax
function rco {
    if [ -z "`svn info`" ]; then
	return 1;
    fi
    local url=`svn info |grep "URL *: "|grep -o "http:.*$"|grep "BO/branches"|grep BCO|tr -d "\n"`
    if [ -z "$url" ]; then
	echo " error : $(pwd) is not a LaForge BCO"
	return
    fi
    local bn=`echo $url|grep -o "_[0-9]*_g"|grep -o "[0-9]*"`
    # we pick the same user as the bco
    local rooturl=`echo $url|grep -o "^.*/BO"`
    local module=`echo $url| sed 's/^.*svn\/\(.*\)\/BO\/.*$/\1/g'`
    local modbranch=`echo $url|grep -o "$module\_.*\_$bn"|sed 's/^$module\(_.*_\)$bn$/\1/g'`
    local user=`echo $url|grep -o "_g[0-9]\{6\}_"|grep -o "g[0-9]\{6\}"`
    local timestamp=`date +%y%m%d-%k%M%S`

    local tag=RCO_$module""$modbranch""_$bn""_$user""_$timestamp
    local tagurl=$rooturl/tags/$tag

    echo " copying $url"
    echo " to      $tagurl"
    
    confirm "Create tag $tag ? [y/N]"
    if [ $? -eq 0 ] ;then
	svn copy $url $tagurl -m "bug $bn : [TAG] $tag"
    fi

    if [ $? -eq 0 ] ;then
	svn sw $tagurl
    fi
}

function svnsp
{
    for f in "plan_version.txt" "pvp.txt"
    do
        if [ -e  "$f" ]; then
            svn propset svn:externals -F $f .
            break
        fi
    done
}

##################################
# MACHINE SPECIFIC CONFIGURATION #
##################################

case "$HOST" in
    rmm-p1186948)
        #ssh connection
        function scpo {
            scp $1 g178452@rmm-p1199155f:$2
        }
        alias ssho='ssh g178452@rmm-p1199155f'

        ;;
    rmm-p1199155f)
        #ssh connection
        function scpn {
            scp $1 g178452@rmm-p1186948:$2
        }
        alias sxn='ssh g178452@rmm-p1186948 "~/bin/setSynergy.sh"'
        alias sshn='ssh g178452@rmm-p1186948'

        ;;
esac
